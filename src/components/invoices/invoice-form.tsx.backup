'use client'

import { useState, useEffect, useCallback } from 'react'
import { useRouter } from 'next/navigation'
import { Save, Send, FileText, Calendar, User, Building2, Clock, Download } from 'lucide-react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Textarea } from '@/components/ui/textarea'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Separator } from '@/components/ui/separator'
import { useInvoiceState } from '@/hooks/use-invoice-state'
import { useKeyboardShortcuts } from '@/hooks/use-keyboard-shortcuts'
import { InvoiceLineItems } from './invoice-line-items'
import { InvoiceTotals } from './invoice-totals'
import { TemplateSelector } from './template-selector'
import { createInvoice, updateInvoice, saveInvoiceDraft } from '@/lib/actions/invoice'
import { getBusinesses } from '@/lib/actions/business'
import { getCustomers } from '@/lib/actions/customer'

interface InvoiceFormProps {
  invoiceId?: string
  initialData?: any
}

export function InvoiceForm({ invoiceId, initialData }: InvoiceFormProps) {
  const { state, actions } = useInvoiceState()
  const [businesses, setBusinesses] = useState<any[]>([])
  const [customers, setCustomers] = useState<any[]>([])
  const [loading, setLoading] = useState(false)
  const [showItemSelector, setShowItemSelector] = useState(false)
  const [showExportOptions, setShowExportOptions] = useState(false)
  const router = useRouter()

  const loadBusinesses = useCallback(async () => {
    try {
      const data = await getBusinesses()
      setBusinesses(data)
      if (data.length > 0 && !state.business) {
        actions.setBusiness(data[0]) // Set first business as default
      }
    } catch (error) {
      console.error('Failed to load businesses:', error)
    }
  }, [state.business, actions])

  const loadCustomers = useCallback(async () => {
    try {
      const result = await getCustomers('', 1, 100)
      setCustomers(result.data)
    } catch (error) {
      console.error('Failed to load customers:', error)
    }
  }, [])

  const handleSaveDraft = useCallback(async () => {
    try {
      actions.setSaving(true)
      await saveInvoiceDraft({
        business_id: state.business?.id,
        customer_id: state.customer?.id,
        invoice_number: state.invoiceNumber,
        invoice_date: state.invoiceDate,
        due_date: state.dueDate,
        status: 'draft',
        items: state.items,
        notes: state.notes,
        terms: state.terms,
        payment_terms: state.paymentTerms,
      })
      actions.setLastSaved(new Date())
    } catch (error) {
      console.error('Failed to save draft:', error)
    } finally {
      actions.setSaving(false)
    }
  }, [state, actions])

  const handleExport = async (format: 'pdf' | 'excel', template?: string) => {
    if (!invoiceId) {
      alert('Please save the invoice first before exporting')
      return
    }

    try {
      const response = await fetch(`/api/export/${format}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          invoiceId,
          template,
        }),
      })

      if (!response.ok) {
        throw new Error('Export failed')
      }

      const blob = await response.blob()
      const url = window.URL.createObjectURL(blob)
      const a = document.createElement('a')
      a.href = url
      a.download = `invoice-${state.invoiceNumber}.${format === 'pdf' ? 'pdf' : 'xlsx'}`
      document.body.appendChild(a)
      a.click()
      window.URL.revokeObjectURL(url)
      document.body.removeChild(a)
    } catch (error) {
      console.error('Export failed:', error)
      alert('Failed to export invoice. Please try again.')
    }
  }

  // Load initial data
  useEffect(() => {
    if (initialData) {
      actions.loadInvoice(initialData)
    }
  }, [initialData, actions])

  // Load businesses and customers
  useEffect(() => {
    loadBusinesses()
    loadCustomers()
  }, [loadBusinesses, loadCustomers])

  // Auto-save draft every 30 seconds
  useEffect(() => {
    if (state.isDirty && state.items.length > 0) {
      const timer = setTimeout(() => {
        handleSaveDraft()
      }, 30000)
      return () => clearTimeout(timer)
    }
  }, [state.isDirty, state.items, handleSaveDraft])

  // Keyboard shortcuts
  useKeyboardShortcuts([
    {
      key: 's',
      ctrlKey: true,
      callback: handleSaveDraft,
      description: 'Save Draft'
    },
    {
      key: 'i',
      ctrlKey: true,
      callback: () => setShowItemSelector(true),
      description: 'Add Item'
    },
    {
      key: 'Enter',
      ctrlKey: true,
      callback: () => handleSaveInvoice('draft'),
      description: 'Save Invoice'
    }
  ])

  const handleSaveInvoice = async (status: 'draft' | 'sent' = 'draft') => {
    if (!state.business || !state.customer || state.items.length === 0) {
      alert('Please fill in all required fields and add at least one item')
      return
    }

    try {
      setLoading(true)
      actions.setSaving(true)

      const invoiceData = {
        business_id: state.business.id,
        customer_id: state.customer.id,
        invoice_number: state.invoiceNumber,
        invoice_date: state.invoiceDate,
        due_date: state.dueDate,
        status,
        items: state.items,
        subtotal: state.calculations.subtotal,
        total_discount: state.calculations.totalDiscount,
        total_tax: state.calculations.totalTax,
        cgst_amount: state.calculations.cgstAmount,
        sgst_amount: state.calculations.sgstAmount,
        igst_amount: state.calculations.igstAmount,
        round_off: state.calculations.roundOff,
        total_amount: state.calculations.totalAmount,
        notes: state.notes,
        terms: state.terms,
        payment_terms: state.paymentTerms,
      }

      if (invoiceId) {
        await updateInvoice({ id: invoiceId, ...invoiceData })
      } else {
        await createInvoice(invoiceData)
      }

      actions.setLastSaved(new Date())
      router.push('/invoices')
    } catch (error) {
      console.error('Failed to save invoice:', error)
      alert('Failed to save invoice. Please try again.')
    } finally {
      setLoading(false)
      actions.setSaving(false)
    }
  }

  const generateInvoiceNumber = () => {
    const date = new Date()
    const year = date.getFullYear()
    const month = String(date.getMonth() + 1).padStart(2, '0')
    const day = String(date.getDate()).padStart(2, '0')
    const random = Math.floor(Math.random() * 1000).toString().padStart(3, '0')
    return `INV-${year}${month}${day}-${random}`
  }

  return (
    <div className="max-w-7xl mx-auto space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">
            {invoiceId ? 'Edit Invoice' : 'Create New Invoice'}
          </h1>
          <p className="text-gray-600 mt-1">
            {invoiceId ? 'Update invoice details' : 'Create a new invoice for your customer'}
          </p>
        </div>
        
        <div className="flex items-center space-x-4">
          {state.isDirty && (
            <Badge variant="outline" className="text-orange-600">
              <Clock className="h-3 w-3 mr-1" />
              Unsaved changes
            </Badge>
          )}
          
          {state.lastSaved && (
            <div className="text-sm text-gray-500">
              Last saved: {state.lastSaved.toLocaleTimeString()}
            </div>
          )}
          
          <div className="flex space-x-2">
            <Button
              variant="outline"
              onClick={handleSaveDraft}
              disabled={state.isSaving}
            >
              <Save className="h-4 w-4 mr-2" />
              Save Draft
            </Button>
            
            <Button
              onClick={() => handleSaveInvoice('draft')}
              disabled={loading || state.isSaving}
            >
              <FileText className="h-4 w-4 mr-2" />
              {loading ? 'Saving...' : 'Save Invoice'}
            </Button>
            
            <Button
              onClick={() => handleSaveInvoice('sent')}
              disabled={loading || state.isSaving}
              className="bg-green-600 hover:bg-green-700"
            >
              <Send className="h-4 w-4 mr-2" />
              Send Invoice
            </Button>

            {invoiceId && (
              <Button
                variant="outline"
                onClick={() => setShowExportOptions(!showExportOptions)}
              >
                <Download className="h-4 w-4 mr-2" />
                Export
              </Button>
            )}
          </div>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Main Content */}
        <div className="lg:col-span-2 space-y-6">
          {/* Business & Customer Selection */}
          <Card>
            <CardHeader>
              <CardTitle>Invoice Details</CardTitle>
              <CardDescription>
                Select business and customer for this invoice
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="business">Business *</Label>
                  <Select
                    value={state.business?.id || ''}
                    onValueChange={(value) => {
                      const business = businesses.find(b => b.id === value)
                      actions.setBusiness(business)
                    }}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select business" />
                    </SelectTrigger>
                    <SelectContent>
                      {businesses.map((business) => (
                        <SelectItem key={business.id} value={business.id}>
                          <div className="flex items-center">
                            <Building2 className="h-4 w-4 mr-2" />
                            {business.name}
                          </div>
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="customer">Customer *</Label>
                  <Select
                    value={state.customer?.id || ''}
                    onValueChange={(value) => {
                      const customer = customers.find(c => c.id === value)
                      actions.setCustomer(customer)
                    }}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select customer" />
                    </SelectTrigger>
                    <SelectContent>
                      {customers.map((customer) => (
                        <SelectItem key={customer.id} value={customer.id}>
                          <div className="flex items-center">
                            <User className="h-4 w-4 mr-2" />
                            {customer.name}
                          </div>
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="invoiceNumber">Invoice Number *</Label>
                  <div className="flex space-x-2">
                    <Input
                      id="invoiceNumber"
                      value={state.invoiceNumber}
                      onChange={(e) => actions.setInvoiceNumber(e.target.value)}
                      placeholder="INV-20240101-001"
                    />
                    <Button
                      variant="outline"
                      onClick={() => actions.setInvoiceNumber(generateInvoiceNumber())}
                    >
                      Generate
                    </Button>
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="invoiceDate">Invoice Date *</Label>
                  <Input
                    id="invoiceDate"
                    type="date"
                    value={state.invoiceDate}
                    onChange={(e) => actions.setInvoiceDate(e.target.value)}
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="dueDate">Due Date *</Label>
                  <Input
                    id="dueDate"
                    type="date"
                    value={state.dueDate}
                    onChange={(e) => actions.setDueDate(e.target.value)}
                  />
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Invoice Items */}
          <InvoiceLineItems
            items={state.items}
            onUpdateItem={actions.updateItem}
            onRemoveItem={actions.removeItem}
            onAddItem={actions.addItem}
          />

          {/* Notes and Terms */}
          <Card>
            <CardHeader>
              <CardTitle>Additional Information</CardTitle>
              <CardDescription>
                Add notes, terms, and payment information
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="notes">Notes</Label>
                <Textarea
                  id="notes"
                  value={state.notes}
                  onChange={(e) => actions.setNotes(e.target.value)}
                  placeholder="Additional notes for the customer..."
                  rows={3}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="terms">Terms & Conditions</Label>
                <Textarea
                  id="terms"
                  value={state.terms}
                  onChange={(e) => actions.setTerms(e.target.value)}
                  placeholder="Terms and conditions..."
                  rows={3}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="paymentTerms">Payment Terms</Label>
                <Input
                  id="paymentTerms"
                  value={state.paymentTerms}
                  onChange={(e) => actions.setPaymentTerms(e.target.value)}
                  placeholder="e.g., Net 30 days"
                />
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Sidebar */}
        <div className="space-y-6">
          <InvoiceTotals calculations={state.calculations} />
          
          {/* Export Options */}
          {showExportOptions && invoiceId && (
            <TemplateSelector
              invoiceId={invoiceId}
              invoiceNumber={state.invoiceNumber}
              onExport={handleExport}
            />
          )}
          
          {/* Keyboard Shortcuts */}
          <Card>
            <CardHeader>
              <CardTitle className="text-sm">Keyboard Shortcuts</CardTitle>
            </CardHeader>
            <CardContent className="text-xs space-y-1">
              <div className="flex justify-between">
                <span>Save Draft:</span>
                <kbd className="px-1 py-0.5 bg-gray-100 rounded">Ctrl+S</kbd>
              </div>
              <div className="flex justify-between">
                <span>Add Item:</span>
                <kbd className="px-1 py-0.5 bg-gray-100 rounded">Ctrl+I</kbd>
              </div>
              <div className="flex justify-between">
                <span>Save Invoice:</span>
                <kbd className="px-1 py-0.5 bg-gray-100 rounded">Ctrl+Enter</kbd>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  )
}
